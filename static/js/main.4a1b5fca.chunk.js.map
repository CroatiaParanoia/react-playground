{"version":3,"sources":["components/DynamicForm/index.tsx","App.tsx","components/TodoList/index.tsx","utils/request.ts","constant/apis.ts","constant/actions.ts","pages/TodoList/index.tsx","hooks/useRequest.ts","pages/404/index.tsx","router.tsx","serviceWorker.ts","mock/index.ts","mock/apis/todoList.ts","mock/constant.ts","index.tsx"],"names":["DynamicForm","dataSource","value","useState","innerDataSource","setInnerDataSource","onCheckboxChange","useCallback","checked","attrId","attrValue","produce","draftState","forEach","item","attrValueSelected","filter","v","push","tableDataSource","useMemo","treeArr","fn","arr","length","firstItem","R","attrChildren","map","attrName","maxLevel","res","back","tree","path","originPath","itemKey","concat","join","newItem","key","newPath","rowItem","reduce","pre","tableColumn","title","dataIndex","useEffect","newInnerDataSource","index","renderItem","className","attrValues","attrValueItem","includes","onChange","e","target","columns","pagination","defaultSelectedList","App","TodoItem","isFinish","id","onDelete","style","height","textDecoration","type","onClick","TodoList","size","header","footer","bordered","errorModal","error","axios","defaults","timeout","interceptors","request","use","config","Object","assign","headers","Promise","reject","response","status","Error","then","data","getTodoList","keywords","pageIndex","pageSize","apis","method","TodoListPage","requestFn","params","initState","React","setData","useDeepCompareEffect","console","log","useRequest","NotFoundPage","history","useHistory","toTodolistPage","RouterComponent","exact","component","NotFound","from","to","Boolean","window","location","hostname","match","Mock","mock","success","message","Random","cparagraph","startMock","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4a1b5fca.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport produce from 'immer';\nimport * as R from 'ramda';\nimport { Checkbox, List, Table } from 'antd';\n\ninterface DataSourceItem {\n  attrName: string;\n  attrId: string;\n  attrValues: string[];\n}\n\ntype InnerDataSourceItem = DataSourceItem & {\n  attrValueSelected: string[];\n};\n\nconst DynamicForm: React.FC<{ dataSource: DataSourceItem[]; value: string[][] }> = ({\n  dataSource,\n  value\n}) => {\n  const [innerDataSource, setInnerDataSource] = useState<InnerDataSourceItem[]>([]);\n\n  const onCheckboxChange = useCallback(\n    (checked, attrId, attrValue) => {\n      const draftFn = (draftState: InnerDataSourceItem[]) => {\n        draftState.forEach((item) => {\n          if (item.attrId === attrId) {\n            item.attrValueSelected = item.attrValueSelected.filter((v) => v !== attrValue);\n\n            if (checked) item.attrValueSelected.push(attrValue);\n          }\n        });\n      };\n      setInnerDataSource(produce(innerDataSource, draftFn));\n    },\n    [innerDataSource, setInnerDataSource]\n  );\n\n  const tableDataSource = useMemo(() => {\n    interface TreeItem {\n      attrName: string;\n      attrId: string;\n      attrValue: string;\n      attrChildren: TreeItem[];\n    }\n\n    const fn = (arr: InnerDataSourceItem[]): TreeItem[] => {\n      if (!arr.length) {\n        return [];\n      }\n      const firstItem = R.head(arr);\n      const attrChildren = fn(R.tail(arr));\n      return firstItem!.attrValueSelected.map((item) => {\n        return {\n          attrName: firstItem!.attrName,\n          attrId: firstItem!.attrId,\n          attrValue: item,\n          attrChildren\n        };\n      });\n    };\n\n    const treeArr = fn(innerDataSource);\n\n    const maxLevel = innerDataSource.length;\n\n    const back = (tree: TreeItem, path?: any[], res: any[] = []) => {\n      if (!tree || !tree.attrChildren.length) {\n        return [];\n      }\n      const originPath = path || [\n        { attrName: tree.attrName, attrId: tree.attrId, attrValue: tree.attrValue }\n      ];\n      tree.attrChildren.forEach((item) => {\n        const itemKey = originPath\n          .map((v) => v.attrValue)\n          .concat(item.attrValue)\n          .join('-');\n        const newItem = {\n          attrName: item.attrName,\n          attrId: item.attrId,\n          attrValue: item.attrValue,\n          key: itemKey\n        };\n        const newPath = [...originPath, newItem];\n        back(item, newPath, res);\n        if (newPath.length === maxLevel) {\n          const rowItem = newPath.reduce(\n            (pre, item) => ({ ...pre, [item.attrId]: item.attrValue, key: item.key }),\n            {}\n          );\n          res.push(rowItem);\n        }\n      });\n\n      return res;\n    };\n\n    const res: any[] = [];\n\n    treeArr.forEach((item) => {\n      res.push(...back(item));\n    });\n    return res;\n  }, [innerDataSource]);\n\n  const tableColumn = useMemo(() => {\n    return innerDataSource.map((item) => {\n      return {\n        title: item.attrName,\n        dataIndex: item.attrId,\n        key: item.attrId\n      };\n    });\n  }, [innerDataSource]);\n\n  useEffect(() => {\n    const newInnerDataSource: InnerDataSourceItem[] = dataSource.map((item, index) => {\n      return {\n        ...item,\n        attrValueSelected: R.clone(value[index] || [])\n      };\n    });\n    setInnerDataSource(produce(newInnerDataSource, () => {}));\n  }, [dataSource, value, setInnerDataSource]);\n\n  const renderItem = useCallback(\n    (item: InnerDataSourceItem) => {\n      return (\n        <div className=\"df ac pt12 pb12\">\n          <div className=\"w120 mr12\">{item.attrName}</div>\n          <div className=\"f1 ac\">\n            {item.attrValues.map((attrValueItem) => {\n              return (\n                <Checkbox\n                  key={attrValueItem}\n                  checked={item.attrValueSelected.includes(attrValueItem)}\n                  onChange={(e) => onCheckboxChange(e.target.checked, item.attrId, attrValueItem)}\n                >\n                  {attrValueItem}\n                </Checkbox>\n              );\n            })}\n          </div>\n        </div>\n      );\n    },\n    [onCheckboxChange]\n  );\n\n  return (\n    <div>\n      <div>\n        <List dataSource={innerDataSource} renderItem={renderItem} />\n        <Table dataSource={tableDataSource} columns={tableColumn} pagination={false} />\n      </div>\n    </div>\n  );\n};\n\nexport default DynamicForm;\n","import React from 'react';\nimport './App.scss';\nimport DynamicForm from '@src/components/DynamicForm';\n\nconst defaultSelectedList = [\n  {\n    attrName: '型号',\n    attrId: '100001',\n    attrValues: ['大陆版', '港版', '台版']\n  },\n  {\n    attrName: '颜色',\n    attrId: '100002',\n    attrValues: ['红', '白', '黑']\n  },\n  {\n    attrName: '内存',\n    attrId: '100003',\n    attrValues: ['64G', '32G', '16G']\n  }\n];\n\nfunction App() {\n  return (\n    <div className=\"ml12 pl12\">\n      <DynamicForm dataSource={defaultSelectedList} value={[]} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { Checkbox, Button, List } from 'antd';\n\ninterface ListItem {\n  value: string;\n  id: string;\n  isFinish: boolean;\n}\n\nconst TodoItem: React.FC<ListItem & {\n  onDelete?: (id: string) => void;\n  onChange?: (id: string) => void;\n  checked?: boolean;\n}> = ({ value, isFinish, id, checked, onDelete, onChange }) => (\n  <div className=\"w100-percent df ac jsb pl12 pr12\" style={{ height: 40 }}>\n    <Checkbox checked={checked} onChange={() => onChange?.(id)}>\n      <span style={{ textDecoration: isFinish ? 'line-through' : '' }}>{value}</span>\n    </Checkbox>\n\n    <Button type=\"danger\" onClick={() => onDelete?.(id)}>\n      删除\n    </Button>\n  </div>\n);\n\nconst TodoList: React.FC<{ dataSource: ListItem[] }> = ({ dataSource }) => (\n  <div>\n    <List\n      size=\"large\"\n      header={<div>Header</div>}\n      footer={<div>Footer</div>}\n      bordered\n      dataSource={dataSource}\n      renderItem={(item) => (\n        <TodoItem\n          key={item.id}\n          id={item.id}\n          value={item.value}\n          isFinish={item.isFinish}\n          checked={false}\n        />\n      )}\n    />\n  </div>\n);\n\nexport default TodoList;\n","import axios, { AxiosStatic } from 'axios';\nimport { Modal } from 'antd';\n\nfunction errorModal(title: string) {\n  Modal.error({\n    title\n  });\n}\n\naxios.defaults.timeout = 10000; // 超时时间\n\naxios.interceptors.request.use(\n  (config: any) => {\n    Object.assign(config.headers, {\n      'X-Auth-Token': '666',\n      'Content-Type': 'application/json'\n    });\n    return config;\n  },\n  (error) => {\n    errorModal('请求超时，请稍后重试！');\n    return Promise.reject(error);\n  }\n);\n// http响应拦截器\naxios.interceptors.response.use(\n  (res) => {\n    if (res.status === 403) {\n      errorModal('没有权限');\n      throw new Error('没有权限');\n    }\n    return res;\n  },\n  (error) => {\n    errorModal('请求失败，请稍后重试！');\n    return Promise.reject(error);\n  }\n);\n\nconst request = <T>(...arg: Parameters<AxiosStatic>) =>\n  axios(...arg).then((res) => res.data as Promise<ResponseBody<T>>);\n\nexport default request;\n","const baseUrl = '/api';\n\nexport const getTodoList = `${baseUrl}/list`;\n\nexport default {};\n","import request from '@utils/request';\nimport * as apis from './apis';\n\ninterface GetTodoListParams {\n  keywords: string;\n  pageIndex: number;\n  pageSize: number;\n}\n\ninterface TodoListItem {\n  value: string;\n  isFinish: boolean;\n  id: string;\n}\n\nexport const getTodoList = ({ keywords = '', pageIndex = 1, pageSize = 10 }: GetTodoListParams) =>\n  request<TodoListItem[]>(apis.getTodoList, {\n    method: 'GET',\n    data: { keywords, pageIndex, pageSize }\n  });\n\nexport const a = {};\n","import React from 'react';\nimport Todolist from '@src/components/TodoList';\nimport { getTodoList } from '@src/constant/actions';\nimport useRequest from '@src/hooks/useRequest';\n\nconst TodoListPage: React.FC<{}> = () => {\n  const [data] = useRequest(getTodoList, { keywords: '', pageIndex: 1, pageSize: 10 }, []);\n\n  return (\n    <div className=\"todolist-page\">\n      <Todolist dataSource={data} />\n    </div>\n  );\n};\n\nexport default TodoListPage;\n","import React from 'react';\nimport { useDeepCompareEffect } from 'react-use';\n\nexport default function useRequest<R, T>(\n  requestFn: (p: R) => Promise<ResponseBody<T>>,\n  params: R,\n  initState: T\n): [T] {\n  const [data, setData] = React.useState<T>(initState);\n  useDeepCompareEffect(() => {\n    requestFn(params).then((res) => {\n      console.log(res);\n      setData(res.data);\n    });\n  }, [params]);\n\n  return [data];\n}\n","import React from 'react';\nimport { Button } from 'antd';\nimport { useHistory } from 'react-router-dom';\n\nconst NotFoundPage: React.FC<{}> = () => {\n  const history = useHistory();\n  const toTodolistPage = React.useCallback(() => {\n    history.push('/');\n  }, [history]);\n\n  return (\n    <div className=\"not-found-page\">\n      <div>404 没找到哦</div>\n      <Button type=\"danger\" onClick={toTodolistPage}>\n        去首页\n      </Button>\n    </div>\n  );\n};\n\nexport default NotFoundPage;\n","import React from 'react';\nimport {\n  HashRouter as Router, Route, Redirect, Switch,\n} from 'react-router-dom';\nimport App from './App';\nimport TodoList from './pages/TodoList';\nimport NotFound from './pages/404';\n\nfunction RouterComponent() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/todolist\" component={TodoList} />\n        <Route exact path=\"/404\" component={NotFound} />\n        <Redirect exact from=\"/*\" to=\"/404\" />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default RouterComponent;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* tsignore: disabled */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import todoList from './apis/todoList';\n\nfunction startMock() {\n  todoList();\n}\n\nexport default startMock;\n","import Mock from 'mockjs';\nimport { baseUrl } from '../constant';\n\nexport default () => {\n  Mock.mock(`${baseUrl}/list`, 'get', {\n    success: true,\n    message: '请求成功',\n    'data|10-15': [\n      {\n        'value|1-10': () => Mock.Random.cparagraph(1),\n        'id|5': '',\n        'isFinish|1': false,\n      },\n    ],\n  });\n};\n","export const baseUrl = '/api';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './router';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport startMock from './mock';\n\n// if (process.env.NODE_ENV === 'development') {\nstartMock();\n// }\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}